// /**
//  * This program creates a simple "hash" of
//  * a person's name. A hash is an integer that is
//  * mathematically derived from another object.
//  * In this case, a string (the first and last name)
//  * is accessed character by character and the hash
//  * is built up from a number generated by each character.
//  * While this function does not necessarily produce
//  * unique hashes (different names can hash to the
//  * same value), there is a relatively low possibility
//  * of a "collision" with a class of roughly 400 students.
//  *
//  * We will learn more about hashing later this quarter!
//  */

#include <iostream>
#include "Vector.h"
#include "QRecursiveMutex"

using namespace std;

int bishkek(int n) {
    if (n <= 2) {
        return n;
    }

    int result = 137;
    bishkek(n - 1);
    result++;
    bishkek(n - 2);
    result++;
    bishkek(n - 3);
    result++;

    return result;
}

// cout << bishkek (8) << endl; // 140，好，我是正确的


int batken(const Vector<int>& v) {
    if (v.isEmpty()) {
        return -1;
    }

    int total = 0;
    for (int i = 1; i < v.size(); i++) {
        total += v[i];
        return batken(v.subList(i));
    }

    return total;
}

// (2) Determine what this outputs!

int main()
{
    // (1) Determine what this outputs!
    cout << batken({1, 2, 3, 4}) << endl; // 好，我对了，居然真的是0，居然真的是0，难蚌，大脑打结，但是我对了
    return 0;
}






